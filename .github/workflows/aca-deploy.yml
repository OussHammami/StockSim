name: Deploy - Azure Container Apps (ACA) (No Inputs)

on:
  workflow_dispatch: {}

permissions:
  contents: read
  packages: read

env:
  RESOURCE_GROUP: rg-stocksim-dev
  LOCATION: westeurope
  ENV_NAME: aca-stocksim-dev
  IMAGE_TAG: latest
  REGISTRY: ghcr.io
  SUBSCRIPTION_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Lowercase owner
        id: lc
        shell: bash
        run: |
          echo "owner_lc=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set subscription
        run: az account set --subscription "${{ env.SUBSCRIPTION_ID }}"

      - name: Ensure Container Apps CLI extension (no provider registration)
        run: |
          az extension add --name containerapp --upgrade
          az version
          az extension list -o table

      - name: Ensure resource group
        run: az group create -n "${{ env.RESOURCE_GROUP }}" -l "${{ env.LOCATION }}" --tags app=stocksim env=dev

      - name: Ensure Log Analytics workspace
        id: law
        shell: bash
        run: |
          LAW_NAME="log-${{ env.ENV_NAME }}"
          az monitor log-analytics workspace create \
            --resource-group "${{ env.RESOURCE_GROUP }}" \
            --workspace-name "$LAW_NAME" \
            --location "${{ env.LOCATION }}" >/dev/null
          ID=$(az monitor log-analytics workspace show -g "${{ env.RESOURCE_GROUP }}" -n "$LAW_NAME" --query "customerId" -o tsv)
          KEY=$(az monitor log-analytics workspace get-shared-keys -g "${{ env.RESOURCE_GROUP }}" -n "$LAW_NAME" --query "primarySharedKey" -o tsv)
          echo "id=$ID" >> $GITHUB_OUTPUT
          echo "key=$KEY" >> $GITHUB_OUTPUT

      - name: Ensure ACA environment
        run: |
          az containerapp env create \
            --name "${{ env.ENV_NAME }}" \
            --resource-group "${{ env.RESOURCE_GROUP }}" \
            --location "${{ env.LOCATION }}" \
            --logs-workspace-id "${{ steps.law.outputs.id }}" \
            --logs-workspace-key "${{ steps.law.outputs.key }}"

      - name: Deploy MarketFeed (external)
        id: feed
        shell: bash
        run: |
          OWNER="${{ steps.lc.outputs.owner_lc }}"
          IMG="${{ env.REGISTRY }}/${OWNER}/stocksim-marketfeed:${{ env.IMAGE_TAG }}"
          az containerapp up \
            --name marketfeed \
            --resource-group "${{ env.RESOURCE_GROUP }}" \
            --environment "${{ env.ENV_NAME }}" \
            --image "$IMG" \
            --target-port 8080 \
            --ingress external \
            --env-vars ASPNETCORE_URLS="http://0.0.0.0:8080" OTEL_SERVICE_NAME="stocksim.marketfeed"
          echo "fqdn=$(az containerapp show -g '${{ env.RESOURCE_GROUP }}' -n marketfeed --query 'properties.configuration.ingress.fqdn' -o tsv)" >> $GITHUB_OUTPUT

      - name: Deploy Postgres (internal)
        id: pg
        shell: bash
        run: |
          az containerapp up \
            --name pg \
            --resource-group "${{ env.RESOURCE_GROUP }}" \
            --environment "${{ env.ENV_NAME }}" \
            --image "postgres:16-alpine" \
            --target-port 5432 \
            --ingress internal \
            --env-vars POSTGRES_USER=stocksim POSTGRES_PASSWORD=stocksim POSTGRES_DB=stocksim
          echo "fqdn=$(az containerapp show -g '${{ env.RESOURCE_GROUP }}' -n pg --query 'properties.configuration.ingress.fqdn' -o tsv)" >> $GITHUB_OUTPUT

      - name: Deploy RabbitMQ (internal)
        id: rabbit
        shell: bash
        run: |
          az containerapp up \
            --name rabbitmq \
            --resource-group "${{ env.RESOURCE_GROUP }}" \
            --environment "${{ env.ENV_NAME }}" \
            --image "rabbitmq:3-management" \
            --target-port 5672 \
            --ingress internal
          echo "fqdn=$(az containerapp show -g '${{ env.RESOURCE_GROUP }}' -n rabbitmq --query 'properties.configuration.ingress.fqdn' -o tsv)" >> $GITHUB_OUTPUT

      - name: Deploy Web (external)
        id: web
        shell: bash
        run: |
          OWNER="${{ steps.lc.outputs.owner_lc }}"
          IMG="${{ env.REGISTRY }}/${OWNER}/stocksim-web:${{ env.IMAGE_TAG }}"
          PG="${{ steps.pg.outputs.fqdn }}"
          RABBIT="${{ steps.rabbit.outputs.fqdn }}"
          az containerapp up \
            --name web \
            --resource-group "${{ env.RESOURCE_GROUP }}" \
            --environment "${{ env.ENV_NAME }}" \
            --image "$IMG" \
            --target-port 8080 \
            --ingress external \
            --env-vars \
              ASPNETCORE_URLS="http://0.0.0.0:8080" \
              ASPNETCORE_ENVIRONMENT="Development" \
              ConnectionStrings__DefaultConnection="Host=$PG;Port=443;Database=stocksim;Username=stocksim;Password=stocksim;Ssl Mode=Disable;Timeout=15;Command Timeout=30;Keepalive=30;Tcp Keepalive=true" \
              MarketFeed__BaseUrl="https://${{ steps.feed.outputs.fqdn }}" \
              Rabbit__Host="$RABBIT" \
              Rabbit__Port="443" \
              Rabbit__User="guest" \
              Rabbit__Pass="guest" \
              Rabbit__Queue="stocksim.orders" \
              OTEL_SERVICE_NAME="stocksim.web"
          echo "fqdn=$(az containerapp show -g '${{ env.RESOURCE_GROUP }}' -n web --query 'properties.configuration.ingress.fqdn' -o tsv)" >> $GITHUB_OUTPUT
      - name: Set health checks
        run: |
          az containerapp ingress healthcheck set --name web --resource-group ${{ env.RESOURCE_GROUP }} --probe-type liveness --path /healthz --port 8080 --interval 15 --timeout 5 --unhealthy-threshold 3
          az containerapp ingress healthcheck set --name web --resource-group ${{ env.RESOURCE_GROUP }} --probe-type readiness --path /readyz --port 8080 --interval 15 --timeout 5 --unhealthy-threshold 3

      - name: Output endpoints
        shell: bash
        run: |
          echo "WEB:    https://${{ steps.web.outputs.fqdn }}"
          echo "FEED:   https://${{ steps.feed.outputs.fqdn }}"
          echo "POSTGRES (internal FQDN): ${{ steps.pg.outputs.fqdn }}:443"
          echo "RABBITMQ (internal FQDN): ${{ steps.rabbit.outputs.fqdn }}:443"