name: Deploy - Azure Container Apps (ACA) (No Inputs)

on:
  workflow_dispatch: {}

permissions:
  contents: read
  packages: read

env:
  RESOURCE_GROUP: rg-stocksim-dev
  LOCATION: westeurope
  ENV_NAME: aca-stocksim-dev
  IMAGE_TAG: latest
  REGISTRY: ghcr.io
  SUBSCRIPTION_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Lowercase owner
        id: lc
        shell: bash
        run: echo "owner_lc=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set subscription
        run: az account set --subscription "${{ env.SUBSCRIPTION_ID }}"

      - name: Ensure Container Apps CLI extension
        run: |
          az extension add --name containerapp --upgrade
          az version

      - name: Ensure resource group
        run: az group create -n "${{ env.RESOURCE_GROUP }}" -l "${{ env.LOCATION }}" --tags app=stocksim env=dev

      - name: Ensure Log Analytics workspace
        id: law
        shell: bash
        run: |
          LAW_NAME="log-${{ env.ENV_NAME }}"
          az monitor log-analytics workspace create --resource-group "${{ env.RESOURCE_GROUP }}" --workspace-name "$LAW_NAME" --location "${{ env.LOCATION }}" >/dev/null
          echo "id=$(az monitor log-analytics workspace show -g '${{ env.RESOURCE_GROUP }}' -n "$LAW_NAME" --query 'customerId' -o tsv)" >> $GITHUB_OUTPUT
          echo "key=$(az monitor log-analytics workspace get-shared-keys -g '${{ env.RESOURCE_GROUP }}' -n "$LAW_NAME" --query 'primarySharedKey' -o tsv)" >> $GITHUB_OUTPUT

      - name: Ensure ACA environment
        run: |
          az containerapp env create \
            --name "${{ env.ENV_NAME }}" \
            --resource-group "${{ env.RESOURCE_GROUP }}" \
            --location "${{ env.LOCATION }}" \
            --logs-workspace-id "${{ steps.law.outputs.id }}" \
            --logs-workspace-key "${{ steps.law.outputs.key }}"

      # Public MarketFeed
      - name: Deploy MarketFeed (external)
        id: feed
        shell: bash
        run: |
          OWNER="${{ steps.lc.outputs.owner_lc }}"
          IMG="${{ env.REGISTRY }}/${OWNER}/stocksim-marketfeed:${{ env.IMAGE_TAG }}"
          az containerapp up --name marketfeed --resource-group "${{ env.RESOURCE_GROUP }}" --environment "${{ env.ENV_NAME }}" --image "$IMG" --target-port 8080 --ingress external --env-vars ASPNETCORE_URLS="http://0.0.0.0:8080" OTEL_SERVICE_NAME="stocksim.marketfeed"
          echo "fqdn=$(az containerapp show -g '${{ env.RESOURCE_GROUP }}' -n marketfeed --query 'properties.configuration.ingress.fqdn' -o tsv)" >> $GITHUB_OUTPUT

      # Internal Postgres with TCP ingress on 5432
      - name: Deploy Postgres (internal TCP:5432)
        id: pg
        shell: bash
        run: |
          az containerapp up --name pg --resource-group "${{ env.RESOURCE_GROUP }}" --environment "${{ env.ENV_NAME }}" --image "postgres:16-alpine" --target-port 5432 --ingress internal --env-vars POSTGRES_USER=stocksim POSTGRES_PASSWORD=stocksim POSTGRES_DB=stocksim
          az containerapp ingress enable -g "${{ env.RESOURCE_GROUP }}" -n pg --type internal --transport tcp --target-port 5432 --exposed-port 5432
          echo "fqdn=$(az containerapp show -g '${{ env.RESOURCE_GROUP }}' -n pg --query 'properties.configuration.ingress.fqdn' -o tsv)" >> $GITHUB_OUTPUT

      # Internal RabbitMQ with TCP ingress on 5672
      - name: Deploy RabbitMQ (internal TCP:5672)
        id: rabbit
        shell: bash
        run: |
          az containerapp up --name rabbitmq --resource-group "${{ env.RESOURCE_GROUP }}" --environment "${{ env.ENV_NAME }}" --image "rabbitmq:3-management" --target-port 5672 --ingress internal
          az containerapp ingress enable -g "${{ env.RESOURCE_GROUP }}" -n rabbitmq --type internal --transport tcp --target-port 5672 --exposed-port 5672
          echo "fqdn=$(az containerapp show -g '${{ env.RESOURCE_GROUP }}' -n rabbitmq --query 'properties.configuration.ingress.fqdn' -o tsv)" >> $GITHUB_OUTPUT

      # Public Web and correct env wiring
      - name: Deploy Web (external)
        id: web
        shell: bash
        run: |
          OWNER="${{ steps.lc.outputs.owner_lc }}"
          IMG="${{ env.REGISTRY }}/${OWNER}/stocksim-web:${{ env.IMAGE_TAG }}"
          PG="${{ steps.pg.outputs.fqdn }}"
          RABBIT="${{ steps.rabbit.outputs.fqdn }}"
          FEED="${{ steps.feed.outputs.fqdn }}"
          az containerapp up --name web --resource-group "${{ env.RESOURCE_GROUP }}" --environment "${{ env.ENV_NAME }}" --image "$IMG" --target-port 8080 --ingress external --env-vars ASPNETCORE_URLS="http://0.0.0.0:8080" ConnectionStrings__DefaultConnection="Host=$PG;Port=5432;Database=stocksim;Username=stocksim;Password=stocksim;Ssl Mode=Disable;Timeout=15;Command Timeout=30;Keepalive=30;Tcp Keepalive=true" Rabbit__Host="$RABBIT" Rabbit__Port="5672" MarketFeed__BaseUrl="https://$FEED"
          echo "fqdn=$(az containerapp show -g '${{ env.RESOURCE_GROUP }}' -n web --query 'properties.configuration.ingress.fqdn' -o tsv)" >> $GITHUB_OUTPUT

      - name: Configure web health probes
        shell: bash
        run: |
          RG="${{ env.RESOURCE_GROUP }}"; APP="web"
          CONTAINER=$(az containerapp show -g "$RG" -n "$APP" --query 'properties.template.containers[0].name' -o tsv)
          IMAGE=$(az containerapp show -g "$RG" -n "$APP" --query 'properties.template.containers[0].image' -o tsv)
          cat > probes.yaml <<EOF
          properties:
            template:
              containers:
              - name: ${CONTAINER}
                image: ${IMAGE}
                probes:
                - type: liveness
                  httpGet:
                    path: /healthz
                    port: 8080
                  initialDelaySeconds: 5
                  periodSeconds: 15
                  timeoutSeconds: 5
                  failureThreshold: 3
                - type: readiness
                  httpGet:
                    path: /readyz
                    port: 8080
                  initialDelaySeconds: 5
                  periodSeconds: 15
                  timeoutSeconds: 5
                  failureThreshold: 3
          EOF
          az containerapp update -g "$RG" -n "$APP" --yaml probes.yaml

      - name: Output endpoints
        shell: bash
        run: |
          echo "WEB:      https://${{ steps.web.outputs.fqdn }}"
          echo "FEED:     https://${{ steps.feed.outputs.fqdn }}"
          echo "POSTGRES: ${{ steps.pg.outputs.fqdn }}:5432"
          echo "RABBITMQ: ${{ steps.rabbit.outputs.fqdn }}:5672"
