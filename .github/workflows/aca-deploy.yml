name: Deploy - Azure Container Apps (ACA)

on:
  workflow_dispatch:
    inputs:
      subscription_id:
        description: "Azure Subscription ID"
        required: true
        type: string
      resource_group:
        description: "Resource group name"
        required: true
        type: string
        default: "rg-stocksim-dev"
      location:
        description: "Azure region (e.g., westeurope, eastus)"
        required: true
        type: string
        default: "westeurope"
      env_name:
        description: "ACA Environment name"
        required: true
        type: string
        default: "aca-stocksim-dev"
      ghcr_owner:
        description: "GHCR owner (lowercase). Defaults to repo owner."
        required: false
        type: string
      image_tag:
        description: "Image tag to deploy (e.g., latest or a commit SHA)"
        required: true
        type: string
        default: "latest"
      deploy_react:
        description: "Deploy React app too? (true/false)"
        required: true
        type: choice
        options: [ "true", "false" ]
        default: "false"

permissions:
  contents: read
  packages: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Lowercase owner
        id: lc
        shell: bash
        run: |
          OWNER="${{ inputs.ghcr_owner || github.repository_owner }}"
          echo "owner_lc=$(echo "$OWNER" | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set subscription
        run: az account set --subscription "${{ inputs.subscription_id }}"

      - name: Ensure resource group
        run: az group create -n "${{ inputs.resource_group }}" -l "${{ inputs.location }}" --tags app=stocksim env=dev

      - name: Ensure Log Analytics workspace
        id: law
        shell: bash
        run: |
          LAW_NAME="log-${{ inputs.env_name }}"
          az monitor log-analytics workspace create \
            --resource-group "${{ inputs.resource_group }}" \
            --workspace-name "$LAW_NAME" \
            --location "${{ inputs.location }}" >/dev/null
          ID=$(az monitor log-analytics workspace show -g "${{ inputs.resource_group }}" -n "$LAW_NAME" --query "customerId" -o tsv)
          KEY=$(az monitor log-analytics workspace get-shared-keys -g "${{ inputs.resource_group }}" -n "$LAW_NAME" --query "primarySharedKey" -o tsv)
          echo "id=$ID" >> $GITHUB_OUTPUT
          echo "key=$KEY" >> $GITHUB_OUTPUT

      - name: Ensure ACA environment
        id: env
        shell: bash
        run: |
          az containerapp env create \
            --name "${{ inputs.env_name }}" \
            --resource-group "${{ inputs.resource_group }}" \
            --location "${{ inputs.location }}" \
            --logs-workspace-id "${{ steps.law.outputs.id }}" \
            --logs-workspace-key "${{ steps.law.outputs.key }}" >/dev/null
          echo "env_ok=1" >> $GITHUB_OUTPUT

      - name: Deploy Postgres (internal)
        id: pg
        shell: bash
        run: |
          APP=pg
          az containerapp up \
            --name "$APP" \
            --resource-group "${{ inputs.resource_group }}" \
            --environment "${{ inputs.env_name }}" \
            --image "postgres:16-alpine" \
            --target-port 5432 \
            --ingress internal \
            --env-vars POSTGRES_USER=stocksim POSTGRES_PASSWORD=stocksim POSTGRES_DB=stocksim \
            --revisions-mode single \
            --query systemResources.storage -o none
          # Get internal FQDN
          FQDN=$(az containerapp show -g "${{ inputs.resource_group }}" -n "$APP" --query "properties.configuration.ingress.fqdn" -o tsv)
          echo "fqdn=$FQDN" >> $GITHUB_OUTPUT

      - name: Deploy RabbitMQ (internal, AMQP only)
        id: rabbit
        shell: bash
        run: |
          APP=rabbitmq
          az containerapp up \
            --name "$APP" \
            --resource-group "${{ inputs.resource_group }}" \
            --environment "${{ inputs.env_name }}" \
            --image "rabbitmq:3-management" \
            --target-port 5672 \
            --ingress internal \
            --revisions-mode single \
            --query systemResources.storage -o none
          FQDN=$(az containerapp show -g "${{ inputs.resource_group }}" -n "$APP" --query "properties.configuration.ingress.fqdn" -o tsv)
          echo "fqdn=$FQDN" >> $GITHUB_OUTPUT

      - name: Deploy MarketFeed (external)
        id: feed
        shell: bash
        run: |
          OWNER="${{ steps.lc.outputs.owner_lc }}"
          TAG="${{ inputs.image_tag }}"
          IMG="${{ env.REGISTRY }}/${OWNER}/stocksim-marketfeed:${TAG}"

          az containerapp up \
            --name marketfeed \
            --resource-group "${{ inputs.resource_group }}" \
            --environment "${{ inputs.env_name }}" \
            --image "$IMG" \
            --target-port 8080 \
            --ingress external \
            --env-vars ASPNETCORE_URLS="http://0.0.0.0:8080" OTEL_SERVICE_NAME="stocksim.marketfeed" \
            --revisions-mode single \
            --query systemResources.storage -o none

          FEED_FQDN=$(az containerapp show -g "${{ inputs.resource_group }}" -n marketfeed --query "properties.configuration.ingress.fqdn" -o tsv)
          echo "fqdn=$FEED_FQDN" >> $GITHUB_OUTPUT

      - name: Deploy Web (external)
        id: web
        shell: bash
        run: |
          OWNER="${{ steps.lc.outputs.owner_lc }}"
          TAG="${{ inputs.image_tag }}"
          IMG="${{ env.REGISTRY }}/${OWNER}/stocksim-web:${TAG}"

          # Build connection string and rabbit env using internal FQDNs
          PG_HOST="${{ steps.pg.outputs.fqdn }}"
          RABBIT_HOST="${{ steps.rabbit.outputs.fqdn }}"

          az containerapp up \
            --name web \
            --resource-group "${{ inputs.resource_group }}" \
            --environment "${{ inputs.env_name }}" \
            --image "$IMG" \
            --target-port 8080 \
            --ingress external \
            --env-vars \
              ASPNETCORE_URLS="http://0.0.0.0:8080" \
              ASPNETCORE_ENVIRONMENT="Development" \
              ConnectionStrings__DefaultConnection="Host=$PG_HOST;Port=443;Database=stocksim;Username=stocksim;Password=stocksim;Ssl Mode=Disable" \
              MarketFeed__BaseUrl="https://${{ steps.feed.outputs.fqdn }}" \
              Rabbit__Host="$RABBIT_HOST" \
              Rabbit__Port="443" \
              Rabbit__User="guest" \
              Rabbit__Pass="guest" \
              Rabbit__Queue="stocksim.orders" \
              OTEL_SERVICE_NAME="stocksim.web" \
            --revisions-mode single \
            --query systemResources.storage -o none

          WEB_FQDN=$(az containerapp show -g "${{ inputs.resource_group }}" -n web --query "properties.configuration.ingress.fqdn" -o tsv)
          echo "fqdn=$WEB_FQDN" >> $GITHUB_OUTPUT

      - name: Optional - Deploy React (external)
        if: ${{ inputs.deploy_react == 'true' }}
        id: react
        shell: bash
        run: |
          OWNER="${{ steps.lc.outputs.owner_lc }}"
          TAG="${{ inputs.image_tag }}"
          IMG="${{ env.REGISTRY }}/${OWNER}/stocksim-react:${TAG}"

          az containerapp up \
            --name react \
            --resource-group "${{ inputs.resource_group }}" \
            --environment "${{ inputs.env_name }}" \
            --image "$IMG" \
            --target-port 80 \
            --ingress external \
            --revisions-mode single \
            --query systemResources.storage -o none

          REACT_FQDN=$(az containerapp show -g "${{ inputs.resource_group }}" -n react --query "properties.configuration.ingress.fqdn" -o tsv)
          echo "fqdn=$REACT_FQDN" >> $GITHUB_OUTPUT

      - name: Output endpoints
        shell: bash
        run: |
          echo "WEB:    https://${{ steps.web.outputs.fqdn }}"
          echo "FEED:   https://${{ steps.feed.outputs.fqdn }}"
          echo "RABBIT: amqp://${{ steps.rabbit.outputs.fqdn }}:443 (AMQP over ACA ingress)"
          echo "POSTGRES: ${{ steps.pg.outputs.fqdn }}:443 (Postgres over ACA ingress)"
          if [ "${{ inputs.deploy_react }}" = "true" ]; then
            echo "REACT:  https://${{ steps.react.outputs.fqdn }}"
          fi