// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StockSim.Infrastructure.Persistence.Portfolioing;

#nullable disable

namespace StockSim.Infrastructure.Migrations.PortfolioDb
{
    [DbContext(typeof(PortfolioDbContext))]
    [Migration("20251031003046_InitPortfolio")]
    partial class InitPortfolio
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("portfolio")
                .HasAnnotation("ProductVersion", "8.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("StockSim.Domain.Orders.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("AverageFillPrice")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("avg_fill_price");

                    b.Property<decimal>("FilledQuantity")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("filled_quantity");

                    b.Property<int>("Side")
                        .HasColumnType("integer")
                        .HasColumnName("side");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("orders", "portfolio");
                });

            modelBuilder.Entity("StockSim.Domain.Portfolio.Portfolio", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("portfolios", "portfolio");
                });

            modelBuilder.Entity("StockSim.Infrastructure.Inbox.InboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DedupeKey")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<DateTimeOffset>("SeenAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DedupeKey")
                        .IsUnique();

                    b.ToTable("inbox_messages", "portfolio");
                });

            modelBuilder.Entity("StockSim.Infrastructure.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Attempts")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DedupeKey")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("OccurredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SchemaVersion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("DedupeKey");

                    b.HasIndex("SentAt", "CreatedAt");

                    b.ToTable("outbox_messages", "portfolio");
                });

            modelBuilder.Entity("StockSim.Domain.Orders.Order", b =>
                {
                    b.OwnsOne("StockSim.Domain.ValueObjects.Symbol", "Symbol", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("character varying(15)")
                                .HasColumnName("symbol");

                            b1.HasKey("OrderId");

                            b1.ToTable("orders", "portfolio");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.OwnsOne("StockSim.Domain.ValueObjects.Price", "LimitPrice", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Value")
                                .HasColumnType("numeric(18,2)")
                                .HasColumnName("limit_price");

                            b1.HasKey("OrderId");

                            b1.ToTable("orders", "portfolio");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.OwnsOne("StockSim.Domain.ValueObjects.Quantity", "Quantity", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Value")
                                .HasColumnType("numeric(18,4)")
                                .HasColumnName("quantity");

                            b1.HasKey("OrderId");

                            b1.ToTable("orders", "portfolio");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.Navigation("LimitPrice");

                    b.Navigation("Quantity")
                        .IsRequired();

                    b.Navigation("Symbol")
                        .IsRequired();
                });

            modelBuilder.Entity("StockSim.Domain.Portfolio.Portfolio", b =>
                {
                    b.OwnsOne("StockSim.Domain.ValueObjects.Money", "Cash", b1 =>
                        {
                            b1.Property<Guid>("PortfolioId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric(18,2)")
                                .HasColumnName("cash");

                            b1.HasKey("PortfolioId");

                            b1.ToTable("portfolios", "portfolio");

                            b1.WithOwner()
                                .HasForeignKey("PortfolioId");
                        });

                    b.OwnsOne("StockSim.Domain.ValueObjects.Money", "ReservedCash", b1 =>
                        {
                            b1.Property<Guid>("PortfolioId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric(18,2)")
                                .HasColumnName("reserved_cash");

                            b1.HasKey("PortfolioId");

                            b1.ToTable("portfolios", "portfolio");

                            b1.WithOwner()
                                .HasForeignKey("PortfolioId");
                        });

                    b.OwnsMany("StockSim.Domain.Portfolio.Position", "Positions", b1 =>
                        {
                            b1.Property<int>("id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("id"));

                            b1.Property<decimal>("AvgCost")
                                .HasColumnType("numeric(18,2)")
                                .HasColumnName("avg_cost");

                            b1.Property<decimal>("Quantity")
                                .HasColumnType("numeric")
                                .HasColumnName("quantity");

                            b1.Property<Guid>("portfolio_id")
                                .HasColumnType("uuid");

                            b1.HasKey("id");

                            b1.HasIndex("portfolio_id");

                            b1.ToTable("positions", "portfolio");

                            b1.WithOwner()
                                .HasForeignKey("portfolio_id");

                            b1.OwnsOne("StockSim.Domain.ValueObjects.Symbol", "Symbol", b2 =>
                                {
                                    b2.Property<int>("Positionid")
                                        .HasColumnType("integer");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasMaxLength(15)
                                        .HasColumnType("character varying(15)")
                                        .HasColumnName("symbol");

                                    b2.HasKey("Positionid");

                                    b2.ToTable("positions", "portfolio");

                                    b2.WithOwner()
                                        .HasForeignKey("Positionid");
                                });

                            b1.Navigation("Symbol")
                                .IsRequired();
                        });

                    b.Navigation("Cash")
                        .IsRequired();

                    b.Navigation("Positions");

                    b.Navigation("ReservedCash")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
