@page "/dashboard"
@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@rendermode InteractiveServer
@using MudBlazor
@using StockSim.Domain.Orders
@using StockSim.Web.Services
@inject PortfolioClient PortfolioClient
@inject TradingClient TradingClient
@inject QuotesHubClient Quotes

<MudPopoverProvider />
<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-6">

    <MudGrid GutterSize="3">
        <!-- Summary cards -->
        <MudItem xs="12" md="4">
            <MudPaper Class="pa-4">
                <MudText Typo="Typo.h6">Portfolio</MudText>
                <MudDivider Class="my-2" />
                <MudStack Row="true" Spacing="2">
                    <MudChip T="string" Color="Color.Success" Variant="Variant.Filled">
                        Cash: @(_summary?.Cash.ToString("0.##") ?? "-")
                    </MudChip>
                    <MudChip T="string" Color="Color.Warning" Variant="Variant.Filled">
                        Reserved: @(_summary?.ReservedCash.ToString("0.##") ?? "-")
                    </MudChip>
                </MudStack>

                <MudStack Class="mt-4" Spacing="2">
                    <MudText Typo="Typo.subtitle2">Quick deposit</MudText>
                    <MudNumericField @bind-Value="_depositAmount" Adornment="Adornment.Start" AdornmentText="$" Min="0" />
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="DepositAsync" Disabled="_busy">
                        @if (_busy) { <MudProgressCircular Indeterminate="true" Size="Size.Small" Class="mr-2" /> }
                        Deposit
                    </MudButton>
                    @if (!string.IsNullOrWhiteSpace(_info))
                    {
                        <MudText Typo="Typo.caption" Color="Color.Info">@_info</MudText>
                    }
                </MudStack>
            </MudPaper>
        </MudItem>

        <!-- Positions table -->
        <MudItem xs="12" md="8">
            <MudPaper Class="pa-4">
                <MudText Typo="Typo.h6">Positions</MudText>
                <MudDivider Class="my-2" />
                <MudTable Items="_summary?.Positions ?? Array.Empty<PortfolioClient.PositionDto>()"
                          Dense="true" Hover="true" Bordered="true">
                    <HeaderContent>
                        <MudTh>Symbol</MudTh>
                        <MudTh class="text-right">Qty</MudTh>
                        <MudTh class="text-right">Avg Cost</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Symbol">@context.Symbol</MudTd>
                        <MudTd DataLabel="Qty" Class="text-right">@context.Quantity</MudTd>
                        <MudTd DataLabel="Avg Cost" Class="text-right">@context.AvgCost</MudTd>
                    </RowTemplate>
                    <NoRecordsContent>
                        <MudText Class="pa-4" Typo="Typo.body2">No positions yet.</MudText>
                    </NoRecordsContent>
                </MudTable>
            </MudPaper>
        </MudItem>

        <!-- Place order -->
        <MudItem xs="12" md="6">
            <MudPaper Class="pa-4">
                <MudText Typo="Typo.h6">Place Order</MudText>
                <MudDivider Class="my-2" />
                <EditForm Model="_form" OnValidSubmit="PlaceOrderAsync">
                    <MudGrid GutterSize="2">
                        <MudItem xs="6">
                            <MudTextField T="string" @bind-Value="_form.Symbol" Label="Symbol" Required="true" />
                        </MudItem>
                        <MudItem xs="6">
                            <MudNumericField T="decimal" @bind-Value="_form.Quantity" Label="Quantity" Required="true" Min="0.0001m" />
                        </MudItem>
                        <MudItem xs="6">
                            <MudSelect T="OrderSide" @bind-Value="_form.Side" Label="Side">
                                <MudSelectItem Value="@(OrderSide.Buy)">Buy</MudSelectItem>
                                <MudSelectItem Value="@(OrderSide.Sell)">Sell</MudSelectItem>
                            </MudSelect>
                            <MudSelect T="OrderType"
                                       Label="Type"
                                       Value="_form.Type"
                                       ValueChanged="OnTypeChanged"
                                       ValueExpression="() => _form.Type">
                                <MudSelectItem Value="@(OrderType.Market)">Market</MudSelectItem>
                                <MudSelectItem Value="@(OrderType.Limit)">Limit</MudSelectItem>
                            </MudSelect>
                        </MudItem>

                        @if (_form.Type == OrderType.Limit)
                        {
                            <MudNumericField T="decimal?" @bind-Value="_form.LimitPrice" Label="Limit price" Min="0" />
                        }

                        <MudItem xs="12">
                            <MudButton Color="Color.Success" Variant="Variant.Filled" Disabled="_busy" Type="Button" OnClick="PlaceOrderAsync">
                                @if (_busy) { <MudProgressCircular Indeterminate="true" Size="Size.Small" Class="mr-2" /> }
                                Submit
                            </MudButton>
                            @if (!string.IsNullOrWhiteSpace(_orderInfo))
                            {
                                <MudText Typo="Typo.caption" Color="Color.Info" Class="ml-3">@_orderInfo</MudText>
                            }
                        </MudItem>
                    </MudGrid>
                </EditForm>
            </MudPaper>
        </MudItem>

        <!-- Live Quote -->
        <MudItem xs="12" md="6">
            <MudPaper Class="pa-4">
                <MudText Typo="Typo.h6">Live Quote</MudText>
                <MudDivider Class="my-2" />
                <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
                    <MudTextField @bind-Value="_watchSymbol" Label="Symbol" Immediate="true" />
                    <MudButton Variant="Variant.Outlined" OnClick="SubscribeQuoteAsync">Subscribe</MudButton>
                </MudStack>

                @if (_quote is not null)
                {
                    <MudStack Class="mt-4" Row="true" Spacing="2">
                        <MudChip T="string" Color="Color.Info" Variant="Variant.Filled">@_quote.Symbol</MudChip>
                        <MudChip T="string" Color="Color.Success" Variant="Variant.Filled">Bid @_quote.Bid</MudChip>
                        <MudChip T="string" Color="Color.Error" Variant="Variant.Filled">Ask @_quote.Ask</MudChip>
                        <MudChip T="string" Variant="Variant.Outlined">Last @_quote.Last</MudChip>
                    </MudStack>
                    <MudText Typo="Typo.caption" Class="mt-2">Updated @_quote.Ts.ToLocalTime()</MudText>
                }
                else
                {
                    <MudText Typo="Typo.caption" Class="mt-2">No quote yet.</MudText>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>

</MudContainer>

@code
{
    // portfolio
    private PortfolioClient.SummaryDto? _summary;
    private decimal _depositAmount = 100m;
    private string _info = "";

    // order
    private OrderForm _form = new()
    {
        Symbol = "AAPL",
        Quantity = 1m,
        Side = OrderSide.Buy,
        Type = OrderType.Limit,
        LimitPrice = 100m
    };

    private sealed class OrderForm
    {
        public string Symbol { get; set; } = "";
        public decimal Quantity { get; set; }
        public OrderSide Side { get; set; }
        public OrderType Type { get; set; }
        public decimal? LimitPrice { get; set; }
    }
    private string _orderInfo = "";

    // quotes
    private string _watchSymbol = "AAPL";
    private QuotesHubClient.QuoteMsg? _quote;

    private bool _busy;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadSummaryAsync();
        }
        catch (Exception ex)
        {
            _info = $"Load failed: {ex.Message}";
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        try
        {
            await Quotes.StartAsync();
            Quotes.OnQuote += msg =>
            {
                if (string.Equals(msg.Symbol, _watchSymbol, StringComparison.OrdinalIgnoreCase))
                {
                    _quote = msg;
                    _ = InvokeAsync(StateHasChanged);
                }
            };
            await Quotes.SubscribeAsync(_watchSymbol);
        }
        catch (Exception ex)
        {
            _info = $"Live quotes unavailable: {ex.Message}";
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task LoadSummaryAsync()
    {
        _summary = await PortfolioClient.GetSummaryAsync();
        StateHasChanged();
    }

    private async Task DepositAsync()
    {
        if (_depositAmount <= 0) return;
        _busy = true;
        _info = "";
        try
        {
            await PortfolioClient.DepositAsync(_depositAmount, null);
            await LoadSummaryAsync();
            _info = $"Deposited {_depositAmount:0.##}.";
        }
        catch (Exception ex)
        {
            _info = ex.Message;
        }
        finally
        {
            _busy = false;
        }
    }

    private async Task PlaceOrderAsync()
    {
        _busy = true;
        _orderInfo = "";
        try
        {
            // ensure demo cash for a smoother UX
            if (_summary is null || _summary.Cash < 1000m)
            {
                await PortfolioClient.DepositAsync(1000m, null);
                await LoadSummaryAsync();
            }
            if (_form.Type == OrderType.Market)
                _form.LimitPrice = null;

            var dto = new TradingClient.PlaceOrderDto(
                null, _form.Symbol, _form.Side, _form.Type, _form.Quantity, _form.LimitPrice);

            var id = await TradingClient.PlaceAsync(dto);
            _orderInfo = $"Order placed: {id}";
        }
        catch (Exception ex)
        {
            _orderInfo = $"Error: {ex.Message}";
        }
        finally
        {
            _busy = false;
        }
    }
    private void OnTypeChanged()
    {
        if (_form.Type == OrderType.Market) _form.LimitPrice = null;
    }
    private async Task SubscribeQuoteAsync()
    {
        if (string.IsNullOrWhiteSpace(_watchSymbol)) return;
        _quote = null;
        await Quotes.SubscribeAsync(_watchSymbol);
    }

    public async ValueTask DisposeAsync() => await Quotes.DisposeAsync();
}
