@page "/dashboard"
@rendermode InteractiveServer
@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@implements IAsyncDisposable

@using MudBlazor
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Http.Connections
@using StockSim.Shared.Models
@inject IHttpClientFactory HttpClientFactory
@inject IConfiguration Config

<MudText Typo="Typo.h5">Portfolio Dashboard</MudText>
<MudText Class="mb-2" Color="Color.Secondary">Live prices (simulated)</MudText>

@if (_quotes.Count == 0)
{
    <MudProgressCircular Indeterminate="true" />
}
else
{
    <MudTable Items="_quotes">
        <HeaderContent>
            <MudTh>Symbol</MudTh>
            <MudTh>Price</MudTh>
            <MudTh>Δ</MudTh>
            <MudTh>UTC</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Symbol">@context.Symbol</MudTd>
            <MudTd DataLabel="Price">@context.Price</MudTd>
            <MudTd DataLabel="Δ">
                <MudText Color="@(context.Change > 0 ? Color.Success : context.Change < 0 ? Color.Error : Color.Default)">
                    @((context.Change >= 0 ? "+" : "") + context.Change)
                </MudText>
            </MudTd>
            <MudTd DataLabel="UTC">@context.TimeUtc.ToString("HH:mm:ss")</MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    private readonly List<Quote> _quotes = new();
    private HubConnection? _hub;

    protected override async Task OnInitializedAsync()
    {
        // 1) initial snapshot
        var client = HttpClientFactory.CreateClient("MarketFeed");
        var snap = await client.GetFromJsonAsync<Quote[]>("/api/quotes");
        if (snap is { Length: > 0 })
            _quotes.AddRange(snap.OrderBy(q => q.Symbol));

        // 2) live updates
        var baseUrl = Config["MarketFeed:BaseUrl"]!;
        _hub = new HubConnectionBuilder()
            .WithUrl($"{baseUrl}/hubs/quotes", opt =>
            {
                // optional but robust in dev cross-origin scenarios
                opt.SkipNegotiation = true;
                opt.Transports = HttpTransportType.WebSockets;
            })
            .WithAutomaticReconnect()
            .Build();

        _hub.On<Quote>("quote", q =>
        {
            var i = _quotes.FindIndex(x => x.Symbol == q.Symbol);
            if (i >= 0) _quotes[i] = q; else _quotes.Add(q);
            _quotes.Sort((a, b) => string.Compare(a.Symbol, b.Symbol, StringComparison.Ordinal));
            InvokeAsync(StateHasChanged);
        });

        await _hub.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (_hub is not null)
            await _hub.DisposeAsync();
    }
}
