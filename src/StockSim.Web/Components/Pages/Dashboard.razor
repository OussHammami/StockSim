@page "/dashboard"
@rendermode InteractiveServer
@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@using MudBlazor
@inject IHttpClientFactory HttpClientFactory

<MudText Typo="Typo.h5">Portfolio Dashboard</MudText>
<MudText Class="mb-2" Color="Color.Secondary">Live prices (simulated)</MudText>

@if (_quotes is null)
{
    <MudProgressCircular Indeterminate="true" />
}
else
{
    <MudTable Items="_quotes">
        <HeaderContent>
            <MudTh>Symbol</MudTh><MudTh>Price</MudTh><MudTh>Δ</MudTh><MudTh>UTC</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Symbol">@context.Symbol</MudTd>
            <MudTd DataLabel="Price">@context.Price</MudTd>
            <MudTd DataLabel="Δ">
                <MudText Color="@(context.Change > 0 ? Color.Success : context.Change < 0 ? Color.Error : Color.Default)">
                    @((context.Change >= 0 ? "+" : "") + context.Change)
                </MudText>
            </MudTd>
            <MudTd DataLabel="UTC">@context.TimeUtc.ToString("HH:mm:ss")</MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    private StockSim.Shared.Models.Quote[]? _quotes;
    private readonly string[] _symbols = new[] { "AAPL", "MSFT", "AMZN", "GOOGL", "NVDA", "TSLA", "META" };
    private System.Timers.Timer? _timer;

    protected override async Task OnInitializedAsync()
    {
        await LoadOnce();
        _timer = new System.Timers.Timer(6000);
        _timer.Elapsed += async (_, __) => await InvokeAsync(LoadOnce);
        _timer.AutoReset = true;
        _timer.Enabled = true;
    }

    private async Task LoadOnce()
    {
        try
        {
            var client = HttpClientFactory.CreateClient("MarketFeed");
            var url = $"/api/quotes?symbolsCsv={string.Join(",", _symbols)}";
            _quotes = await client.GetFromJsonAsync<StockSim.Shared.Models.Quote[]>(url);
            StateHasChanged();
        }
        catch { }
    }

    public void Dispose() => _timer?.Dispose();
}
