services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: stocksim
      POSTGRES_PASSWORD: stocksim
      POSTGRES_DB: stocksim
    ports: ["5432:5432"]
    volumes: [ "pgdata:/var/lib/postgresql/data" ]
    healthcheck:
      test: ["CMD-SHELL","pg_isready -U stocksim -d stocksim"]
      interval: 5s
      timeout: 3s
      retries: 10

  rabbitmq:
    image: rabbitmq:3-management
    ports: ["5672:5672","15672:15672"]
    healthcheck:
      test: ["CMD","rabbitmq-diagnostics","-q","ping"]
      interval: 5s
      timeout: 3s
      retries: 10

  otelcol:
    image: otel/opentelemetry-collector:0.106.1
    command: ["--config=/etc/otelcol-config.yaml"]
    volumes: ["./ops/otelcol.yaml:/etc/otelcol-config.yaml:ro"]

  zipkin:
    image: openzipkin/zipkin:2.24
    ports: ["9411:9411"]

  prometheus:
    image: prom/prometheus:v2.55.1
    volumes: ["./ops/prometheus.yml:/etc/prometheus/prometheus.yml:ro"]
    ports: ["9090:9090"]

  grafana:
    image: grafana/grafana:11.2.0
    ports: ["3000:3000"]
    volumes:
      - ./ops/grafana/provisioning:/etc/grafana/provisioning
      - ./ops/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      prometheus: { condition: service_started }

  marketfeed:
    build:
      context: .
      dockerfile: src/StockSim.MarketFeed/Dockerfile
    environment:
      ASPNETCORE_URLS: http://+:8081
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT}
    ports: ["8081:8081"]
    depends_on:
      rabbitmq: { condition: service_healthy }

  web:
    build:
      context: .
      dockerfile: src/StockSim.Web/Dockerfile
    env_file: [.env]
    environment:
      ASPNETCORE_URLS: http://+:8080
      ConnectionStrings__DefaultConnection: ${ConnectionStrings__DefaultConnection}
      MarketFeed__BaseUrl: ${MarketFeed__BaseUrl}
      Rabbit__Host: rabbitmq
      Rabbit__Port: 5672
      DEMO__SEED: ${DEMO__SEED}
      DEMO__AdminEmail: ${DEMO__AdminEmail}
      DEMO__AdminPassword: ${DEMO__AdminPassword}
      DEMO__UserEmail: ${DEMO__UserEmail}
      DEMO__UserPassword: ${DEMO__UserPassword}
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT}
    ports: ["8080:8080"]
    depends_on:
      postgres: { condition: service_healthy }
      rabbitmq: { condition: service_healthy }
      marketfeed: { condition: service_started }

volumes:
  pgdata: {}
