services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: stocksim
      POSTGRES_PASSWORD: stocksim
      POSTGRES_DB: stocksim
    ports: ["5432:5432"]
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL","pg_isready -U stocksim -d stocksim"]
      interval: 5s
      timeout: 3s
      retries: 10

  rabbitmq:
    image: rabbitmq:3-management
    ports: ["5672:5672","15672:15672"]
    healthcheck:
      test: ["CMD","rabbitmq-diagnostics","-q","ping"]
      interval: 5s
      timeout: 3s
      retries: 10

  marketfeed:
    build:
      context: .
      dockerfile: src/StockSim.MarketFeed/Dockerfile
    environment:
      ASPNETCORE_URLS: http://0.0.0.0:8080
      OTEL_SERVICE_NAME: stocksim.marketfeed
    ports: ["8081:8080"] 
    depends_on:
      rabbitmq:
        condition: service_healthy

  web:
    build:
      context: .
      dockerfile: src/StockSim.Web/Dockerfile
    environment:
      ASPNETCORE_URLS: http://0.0.0.0:8080
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__DefaultConnection: Host=postgres;Port=5432;Database=stocksim;Username=stocksim;Password=stocksim
      MarketFeed__BaseUrl: http://marketfeed:8080     # server-side calls use service DNS
      Rabbit__Host: rabbitmq
      Rabbit__Port: 5672
      Rabbit__User: guest
      Rabbit__Pass: guest
      Rabbit__Queue: stocksim.orders
      OTEL_SERVICE_NAME: stocksim.web
    ports: ["8080:8080"]
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      marketfeed:
        condition: service_started
  react:
    build:
      context: src/StockSim.React
      dockerfile: Dockerfile
      args:
        VITE_MARKETFEED_URL: "http://localhost:8081"
    ports:
      - "8082:80"
    depends_on:
      marketfeed:
        condition: service_started
  prometheus:
    image: prom/prometheus:v2.55.0
    volumes:
      - ./ops/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports: ["9090:9090"]
    depends_on:
      web: { condition: service_started }
      marketfeed: { condition: service_started }

  grafana:
    image: grafana/grafana:11.2.0
    ports: ["3000:3000"]
    depends_on:
      prometheus: { condition: service_started }
  zipkin:
    image: openzipkin/zipkin:2.24
    ports: ["9411:9411"]
volumes:
  pgdata: {}
